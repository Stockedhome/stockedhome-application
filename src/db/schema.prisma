generator client {
  provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}




/// NOTE: Users who have not finished setup are pruned 60 minutes after their latest setup action.
model User {
    // --------------------
    //      Basic Data
    // --------------------
    id         BigInt      @id @default(autoincrement())
    email      String      @unique
    username   String      @unique
    createdAt  DateTime    @default(now())

    /// Current profile pciture as stored in the bucket
    profilepic String?

    /// Users who have not finished setup are pruned 60 minutes after their latest setup action.
    pruneAt    DateTime?

    // ---------------------
    //     Platform Data
    // ---------------------
    households          Household[]
    externalHouseholds  ExternalHousehold[]

    // ----------
    //    Auth
    // ----------
    // Asynchronous signing is used as the primary mode of authentication. See lib/jwt/README.md for more information.
    authPasskeys              AuthPasskey[]
    authSessions              AuthSession[]
    authNewPasskeyRequests    AuthNewPasskeyRequest[]

    // Password is only used when requesting a new passkey (prevent auth spam)
    passwordHash  Bytes
    passwordSalt  Bytes
}

/// NOTE: AuthNewPasskeyRequest records are cleared 30 minutes after creation and are deleted after an approved/denied request
model AuthNewPasskeyRequest {
    id               String      @id @default(cuid())
    createdAt        DateTime    @default(now())
    user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId           BigInt
    sendingIP        String

    /// AuthNewPasskeyRequest records are cleared 30 minutes after creation and are deleted after an approved/denied request
    pruneAt          DateTime

    /// An identifier not necessarily unique to the device but is unique enough to identify the device given a user ID and IP
    /// May be shown to the user under "Device Identifier"
    ///
    /// The client should provide a prettier version of the identifier to the user. How it is parsed is up to the client.
    identifier       String

    challenge        String?

    /// Passkey requests must be signed by another device before they are approved.
    ///
    /// If `signedWithKey` is null, the request is pending. If it is not null, the request is approved.
    authorizedByPasskey    AuthPasskey? @relation(fields: [authorizedByPasskeyId], references: [backendId], onDelete: Cascade)
    authorizedByPasskeyId  String?
}

/// NOTE: When unsigned, the session is cleared after 15 minutes. When signed, the session is cleared 32 hours after last use.
model AuthSession {
    id               String      @id @default(cuid())

    createdAt        DateTime    @default(now())
    updatedAt        DateTime    @updatedAt

    /// The time at which the session will be pruned
    ///
    /// When the session is unsigned, this is 15 minutes after creation.
    /// When the session is signed, this is 32 hours after the last authentication with the session.
    pruneAt          DateTime
    /// The time when this session will expire. This value will not change after session creation.
    ///
    /// This value will be 2 weeks after the session is initially signed.
    finalExpiration  DateTime

    user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId           BigInt

    challenge        String

    signedWithKey    AuthPasskey? @relation(fields: [signedWithKeyId], references: [backendId], onDelete: Cascade)
    signedWithKeyId  String?
}

/// A public key provided by a user device. This is used to authenticate the user.
//
// This table currently does not work with deletion and will error at runtime. See: https://github.com/prisma/prisma/issues/25061
model AuthPasskey {
    backendId                  String      @id @default(cuid())
    createdAt                  DateTime    @default(now())

    user                       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId                     BigInt

    /// ID as stored on the client device
    clientId                String

    /// Transports supported by the client's device
    clientTransports           String[]

    /// Counter storing how many times this key has been used to sign a session
    ///
    /// If a client gives us a lower number than this, we know the key's been used by someone else.
    /// In this situation, we should direct them to support.
    ///
    /// If support determines we have been contacted by the legitimate account owner,
    /// this counter should be set to null so it can be overwritten when the user signs another message.
    sessionCounter             Int?

    publicKey                  Bytes

    /// If this public key was generated when creating the user account for the first time, this field will be null.
    ///
    /// Otherwise, this field will be the ID of the public key used to authenticate the device that authorized the creation of this key.
    ///
    /// This currently does not work with deletion and will error at runtime. See: https://github.com/prisma/prisma/issues/25061
    authorizedByKey            AuthPasskey? @relation(fields: [authorizedByKeyId], references: [backendId], name: "AuthorizedKeys", onDelete: SetNull)
    authorizedByKeyId          String?

    /// Any AuthPublicKey records this key has approved the creation of
    authorizedPasskeys         AuthPasskey[] @relation("AuthorizedKeys")

    /// Any AuthSession records this key has signed
    authorizedSessions         AuthSession[]

    /// Any pending passkey requests this key has signed
    authorizedPasskeyRequests  AuthNewPasskeyRequest[]

    @@unique([clientId, userId])
    @@index([clientId, userId])
}








model Household {
    id        BigInt      @id @default(autoincrement())
    createdAt DateTime    @default(now())
    name      String
    members   User[]
}

/// Households on an external server; i.e. this server is the supplementary server
///
/// We need this info to list the user's households but we don't need to store the household's data
model ExternalHousehold {
    id        String      @id
    server    String
    members   User[]
}
